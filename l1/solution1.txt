# $t0 bedzie rejestrem uzywanym do pobierania wyborow uzytkownika
# $t1 - t3 beda przechowywac 3 zmienne
# $t5 bedzie rejestrem zawierajacym koncowe wyniki operacji
# $t9 bedzie przechowywac 0 jesli do wyniku wypisujemy wynik int a 1, jesli float


.data:
	instruction: .asciiz "Podaj numer wyrazenia, ktore chesz obliczyc: "
	expression_prompt: .asciiz "Dostepne wyrazenia:"
	ex1: .asciiz "1. a = (c - b)/d"
	ex2: .asciiz "2. a = (c - d)*b"
	ex3: .asciiz "3. a = b*c - 2d"
	prompt_values: .asciiz "Podaj wartosci zmiennych: "
	newline: .asciiz "\n"
	var_b: .asciiz "b = "
	var_c: .asciiz "c = "
	var_d: .asciiz "d = "
	result1: .asciiz "Twoj wynik to: "	
	result2: .asciiz "Nie mozna dzielic przez 0!"
	ask_continue: .asciiz "Czy kontynuowac? (0. - Nie, 1. - Tak): "
	
.text:

main:
	
	jal prompt_the_user
	
	
prompt_the_user:
	li $v0, 4			# Ustaw $v0 na wyświetlanie asciiz
	la $a0, expression_prompt	# Podaj wartość do wyświetlenia (informacja o dostępnych działaniach)
    	syscall				# Wyświetl zapisany w rejestrze $a0 tekst na ekran
    					# Operacje wyświetlania powtarzają się tu często, więc kolejne nie będą opisane 
    	
    	li $v0, 4			# Zrób nową linię w konsoli
	la $a0, newline
	syscall
	
	li $v0, 4                     	# Wyświetl działanie 1
	la $a0, ex1
	syscall
	
	li $v0, 4
	la $a0, newline			# Zrób nową linię w konsoli
	syscall
	
	li $v0, 4 			# Wyświetl działanie 2
	la $a0, ex2
	syscall
	
	li $v0, 4			# Zrób nową linię w konsoli 
	la $a0, newline
	syscall
	
	li $v0, 4 			# Wyświetl działanie 3
	la $a0, ex3
	syscall
	
	li $v0, 4			# Zrób nową linię w konsoli
	la $a0, newline
	syscall
	
	li $v0, 4			# Wyświetl prośbę o podanie numeru działania
	la $a0, instruction
	syscall
	
	li $v0, 5			# Przygotuj program do przyjęcia inputu od użytkownika
	syscall				# Poczekaj na input
	move $t0, $v0			# Zapisz podany int do rejestru $v0
	
	 
	li $v0, 4			# Poproś o podanie wartości zmiennych 
	la $a0, prompt_values
	syscall
	
	li $v0, 4			# Zrób nową linię w konsoli
	la $a0, newline
	syscall
	
	li $v0, 4			# Wyświetl zapytanie o wartość b
	la $a0, var_b
	syscall
	
	li $v0, 5			# Przygotuj program do pobrania inta z inputu
	syscall
	move $t1, $v0			# Zapisz podaną wartość w rejestrze $t1
	
	li $v0, 4 			# Wyświetl zapytanie o wartość c
	la $a0, var_c
	syscall
	
	li $v0, 5			# Przygotuj program do pobrania inta z inputu
	syscall
	move $t2, $v0			# Zapisz podaną wartość w rejestrze $t2
	
	li $v0, 4			# Wyświetl zapytanie o wartość d
	la $a0, var_d
	syscall
	
	li $v0, 5			# Przygotuj program do pobrania inta z inputu
	syscall
	move $t3, $v0			# Zapisz podaną wartość w rejestrze $t3
	
	beq $t0, 1, expression1		# Jeśli działanie (rejestr $t0) równa się 1, przejdź to działania 1
	beq $t0, 2, expression2		# Analogicznie dla 2 i 3
	beq $t0, 3, expression3
	
	
expression1:				# Liczenie działania 1 ( a = (c - b)/d )
	
	beq $t3, 0, division_by_zero	# Jeśli wartość d (w rejestrze $t3) równa się zero, od razu przewij liczenie i wyświetl informacje
	
	sub $t4, $t2, $t1		# Odejmij $t1 od $t2 i zapisz wynik w $t4
	#div $t5, $t4, $t3
	
	mtc1 $t3, $f3			# Przepisz wartość $t3 do rejestru $f3 dla floatów, po to aby można było otrzymać wyniki po przecinku
	mtc1 $t4, $f4			# Przepisz wartość $t4 do rejestru dla floatów $f4
	
	div.s $f5, $f4, $f3		# Wykonaj dzielenie floatów i zapisz wynik w rejestrze $f5
	
	
	li $t9, 1			# Zapamiętaj, że wykonane działanie było na floatach, aby poprawnie wyświetlić wynik
	
	jal return_result		# Przejdź do wyświetlania wyniku

expression2:				# Liczenie działania 2 ( a = (c - d)*b )

	sub $t4, $t2, $t3		# Odejmij wartość z $t3 od $t2 i zapisz wynik w $t4
	mul $t5, $t4, $t1		# Pomnóż wartości z $t4 i $t1 i zapisz do $t5
	
	
	li $t9, 0			#zapamietaj, ze wynik nie jest typu float
	
	jal return_result		# Przejdź do wyświetlania wyniku

expression3:

	mul $t4, $t1, $t2		# Pomnóż $t1 i $t2 i zapisz w $t4
	
	mul $t3, $t3, 2			# Pomnóż $t3 razy dwa i zapisz z powrotem w $t3
	
	sub $t5, $t4, $t3		# Odejmij $t3 od $t4 i zapisz w $t5
	
	li $t9, 0			# Użyj rejestru 9, żeby zapamietać, że wynik nie jest typu float

	jal return_result		# Przejdź do wyświetlania wyniku

division_by_zero:

	li $v0, 4			#poinformuj, że nie można dzielić przez 0
	la $a0, result2
	syscall 
	
	li $v0, 4			# newline
	la $a0, newline
	syscall
	
	jal ask_if_continue		# Przejdź do pytania o kontynuację
	
return_result:
	li $v0, 4			#wyświetl etykietę do wyniku
	la $a0, result1
	syscall
	
	beq $t9, 1, return_float	# Jeśli $t9 ma wartość 1, przejdź do wyświetlenia floata, inaczej kontynuuj
	
	li $v0, 1			#ustaw wyświetlanie na int
	move $a0, $t5 			#zapisz wynik z $t5 do wyświetlenia
	syscall
	
	jal ask_if_continue		# Przejdź do pytania o kontynuację algorytmu
	
return_float:
	li $v0, 2			# Ustaw wyświetlanie na float
	mov.s $f12, $f5			#przenieś wynik do rejestru, z którego są wyświetlane floaty ($f12)
	syscall
	
	jal ask_if_continue		# Przejdź do pytania o kontynuację algorytmu
	
ask_if_continue:

	li $v0, 4 			#Nowa linia
	la $a0 newline
	syscall

	li $v0, 4			#zaznacz, że będą wypisywane ascii 
	la $a0, ask_continue		# zapisz do wyświetlenia pytanie, czy kontynuować
	syscall
	
	li $v0, 5			# Przygotuj się do pobrania liczby z klawiatury
	syscall				# Pobierz wybór użytkownika
	move $t0, $v0   		# Zapisz wybór użytkownika do rejestru $t0
	
	beq $t0, 1, main		# Jeśli wybrano 1, wróć na początek do main
	beq $t0, $zero, end		# Jeśli wybrano 0, przejdź do end
	
	jal ask_if_continue		# Jeśli wybrano coś innego, spytaj ponownie o wybór
	
end:	#koniec programu
	
	
	
	




#potencjalne problemy:
#wyjście poza zakres w mnożeniu  -- w przypadku, gdy przekroczymy wartość którą można zapisać na 32 bitach, program zwróci złe wyniki. Aby temu zapobiec, trzeba złączyć wartość z high i low, 
#					i przy wyświetlaniu wyniku do konsoli złączyć je
#wpisanie za dużych liczb --  nie zabezpieczymy się przez podaniem zbyt dużych liczb, bo przed wpisaniem nie mamy do nich dostępu, a użytkownik może wpisać cokolwiek, i rejestr pobierający
#				wartość może się przepełnić
#podanie floatów   -- potencjaly fix - praca cały czas na floatach, już od początku
#wpisanie liter zamiast cyfr -- trudno się przed tym zabezpieczyć, bo wartości są od razu zapisywane dla rejestrów int, możnaby przed zapisem sprawdzać, czy podany input jest liczbą
#				i w przeciwnym wypadku przerwać pobieranie danych i wyświetlić informację.